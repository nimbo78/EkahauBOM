#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""HTML exporter with interactive tables and charts."""

from __future__ import annotations


import html
import logging
from collections import Counter
from pathlib import Path

from .base import BaseExporter
from ..models import ProjectData, AccessPoint, Antenna
from ..analytics import (
    GroupingAnalytics,
    CoverageAnalytics,
    MountingAnalytics,
    RadioAnalytics,
)

logger = logging.getLogger(__name__)


class HTMLExporter(BaseExporter):
    """Export project data to interactive HTML report.

    Creates a standalone HTML file with:
    - Summary statistics
    - Interactive tables for access points and antennas
    - Grouping charts (vendor, floor, color, model)
    - Responsive design
    - Embedded CSS and JavaScript (Chart.js from CDN)
    """

    @property
    def format_name(self) -> str:
        """Human-readable name of the export format."""
        return "HTML"

    def export(self, project_data: ProjectData) -> list[Path]:
        """Export project data to HTML file.

        Args:
            project_data: Processed project data to export

        Returns:
            List containing path to the created HTML file
        """
        output_file = self._get_output_filename(
            project_data.project_name, "report.html"
        )

        html_content = self._generate_html(project_data)

        with open(output_file, "w", encoding="utf-8") as f:
            f.write(html_content)

        files = [output_file]
        self.log_export_success(files)
        return files

    def _generate_html(self, project_data: ProjectData) -> str:
        """Generate complete HTML document.

        Args:
            project_data: Project data to export

        Returns:
            Complete HTML document as string
        """
        # Calculate statistics
        total_aps = len(project_data.access_points)
        total_antennas = len(project_data.antennas)

        # Count unique values
        unique_vendors = len(set(ap.vendor for ap in project_data.access_points))
        unique_floors = len(set(ap.floor_name for ap in project_data.access_points))
        unique_colors = len(
            set(ap.color for ap in project_data.access_points if ap.color)
        )

        # Generate sections
        summary_html = self._generate_summary(
            project_data.project_name,
            total_aps,
            total_antennas,
            unique_vendors,
            unique_floors,
            unique_colors,
            project_data.metadata,
        )

        aps_table_html = self._generate_aps_table(project_data.access_points)
        detailed_aps_table_html = self._generate_detailed_aps_table(
            project_data.access_points
        )
        antennas_table_html = self._generate_antennas_table(project_data.antennas)
        grouping_html = self._generate_grouping_section(project_data.access_points)
        analytics_html = self._generate_analytics_section(
            project_data.access_points, project_data.radios
        )

        # Assemble complete HTML
        html_doc = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{html.escape(project_data.project_name)} - Ekahau BOM Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    {self._get_css_styles()}
</head>
<body>
    <div class="container">
        <header>
            <h1>Ekahau BOM Report</h1>
            <h2>{html.escape(project_data.project_name)}</h2>
        </header>

        {summary_html}
        {grouping_html}
        {analytics_html}
        {aps_table_html}
        {detailed_aps_table_html}
        {antennas_table_html}

        <footer>
            <p>Generated by EkahauBOM | <a href="https://github.com/yourusername/EkahauBOM">GitHub</a></p>
        </footer>
    </div>

    {self._get_javascript()}
</body>
</html>"""

        return html_doc

    def _generate_summary(
        self,
        project_name: str,
        total_aps: int,
        total_antennas: int,
        unique_vendors: int,
        unique_floors: int,
        unique_colors: int,
        metadata=None,
    ) -> str:
        """Generate summary statistics section."""
        # Generate metadata section if available
        metadata_html = ""
        if metadata:
            metadata_items = []
            if metadata.name:
                metadata_items.append(
                    f"<div class='metadata-item'><strong>Project Name:</strong> {html.escape(metadata.name)}</div>"
                )
            if metadata.customer:
                metadata_items.append(
                    f"<div class='metadata-item'><strong>Customer:</strong> {html.escape(metadata.customer)}</div>"
                )
            if metadata.location:
                metadata_items.append(
                    f"<div class='metadata-item'><strong>Location:</strong> {html.escape(metadata.location)}</div>"
                )
            if metadata.responsible_person:
                metadata_items.append(
                    f"<div class='metadata-item'><strong>Responsible Person:</strong> {html.escape(metadata.responsible_person)}</div>"
                )
            if metadata.schema_version:
                metadata_items.append(
                    f"<div class='metadata-item'><strong>Schema Version:</strong> {html.escape(metadata.schema_version)}</div>"
                )

            if metadata_items:
                metadata_html = f"""
            <div class="project-metadata">
                <h4>Project Information</h4>
                {''.join(metadata_items)}
            </div>
            <hr style="margin: 20px 0; border: none; border-top: 1px solid #ddd;">
            """

        return f"""
        <section class="summary">
            <h3>Summary</h3>
            {metadata_html}
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value">{total_aps}</div>
                    <div class="stat-label">Access Points</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{total_antennas}</div>
                    <div class="stat-label">Antennas</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{unique_vendors}</div>
                    <div class="stat-label">Vendors</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{unique_floors}</div>
                    <div class="stat-label">Floors</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{unique_colors}</div>
                    <div class="stat-label">Colors</div>
                </div>
            </div>
        </section>"""

    def _generate_aps_table(self, access_points: list[AccessPoint]) -> str:
        """Generate access points table with BOM counts."""
        # Count by vendor/model/floor/color/tags
        ap_counts = Counter()
        for ap in access_points:
            tags_str = "; ".join(
                str(tag) for tag in sorted(ap.tags, key=lambda t: t.key)
            )
            key = (ap.vendor, ap.model, ap.floor_name, ap.color or "", tags_str)
            ap_counts[key] += 1

        rows_html = ""
        for (vendor, model, floor, color, tags), count in sorted(
            ap_counts.items(),
            key=lambda x: (x[0][0], x[0][1], x[0][2]),  # Sort by vendor, model, floor
        ):
            rows_html += f"""
                <tr>
                    <td>{html.escape(vendor)}</td>
                    <td>{html.escape(model)}</td>
                    <td>{html.escape(floor)}</td>
                    <td>{html.escape(color)}</td>
                    <td>{html.escape(tags)}</td>
                    <td class="count">{count}</td>
                </tr>"""

        return f"""
        <section class="table-section">
            <h3>Access Points Bill of Materials</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Vendor</th>
                            <th>Model</th>
                            <th>Floor</th>
                            <th>Color</th>
                            <th>Tags</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        {rows_html}
                    </tbody>
                </table>
            </div>
        </section>"""

    def _generate_detailed_aps_table(self, access_points: list[AccessPoint]) -> str:
        """Generate detailed access points table with installation parameters.

        Args:
            access_points: List of access points

        Returns:
            HTML string for detailed access points table
        """
        rows_html = ""
        for ap in access_points:
            # Format tags
            tags_str = (
                "; ".join(str(tag) for tag in sorted(ap.tags, key=lambda t: t.key))
                if ap.tags
                else ""
            )

            # Format numeric values with appropriate precision
            location_x = f"{ap.location_x:.2f}" if ap.location_x is not None else "—"
            location_y = f"{ap.location_y:.2f}" if ap.location_y is not None else "—"
            mounting_height = (
                f"{ap.mounting_height:.2f}" if ap.mounting_height is not None else "—"
            )
            azimuth = f"{ap.azimuth:.1f}" if ap.azimuth is not None else "—"
            tilt = f"{ap.tilt:.1f}" if ap.tilt is not None else "—"
            enabled_status = "✓" if ap.enabled else "✗"

            rows_html += f"""
                <tr>
                    <td>{html.escape(ap.name or "")}</td>
                    <td>{html.escape(ap.vendor)}</td>
                    <td>{html.escape(ap.model)}</td>
                    <td>{html.escape(ap.floor_name)}</td>
                    <td class="number">{location_x}</td>
                    <td class="number">{location_y}</td>
                    <td class="number">{mounting_height}</td>
                    <td class="number">{azimuth}</td>
                    <td class="number">{tilt}</td>
                    <td>{html.escape(ap.color or "")}</td>
                    <td>{html.escape(tags_str)}</td>
                    <td class="centered">{enabled_status}</td>
                </tr>"""

        return f"""
        <section class="table-section">
            <h3>Access Points Installation Details</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>AP Name</th>
                            <th>Vendor</th>
                            <th>Model</th>
                            <th>Floor</th>
                            <th>Location X (m)</th>
                            <th>Location Y (m)</th>
                            <th>Height (m)</th>
                            <th>Azimuth (°)</th>
                            <th>Tilt (°)</th>
                            <th>Color</th>
                            <th>Tags</th>
                            <th>Enabled</th>
                        </tr>
                    </thead>
                    <tbody>
                        {rows_html}
                    </tbody>
                </table>
            </div>
        </section>"""

    def _generate_antennas_table(self, antennas: list[Antenna]) -> str:
        """Generate antennas table with counts."""
        antenna_counts = Counter(antenna.name for antenna in antennas)

        rows_html = ""
        for name, count in sorted(antenna_counts.items()):
            rows_html += f"""
                <tr>
                    <td>{html.escape(name)}</td>
                    <td class="count">{count}</td>
                </tr>"""

        return f"""
        <section class="table-section">
            <h3>Antennas Bill of Materials</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Antenna Model</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        {rows_html}
                    </tbody>
                </table>
            </div>
        </section>"""

    def _generate_grouping_section(self, access_points: list[AccessPoint]) -> str:
        """Generate grouping charts section."""
        analytics = GroupingAnalytics()

        # Get grouping data
        by_vendor = analytics.group_by_dimension(access_points, "vendor")
        by_floor = analytics.group_by_dimension(access_points, "floor")
        by_color = analytics.group_by_dimension(access_points, "color")
        by_model = analytics.group_by_dimension(access_points, "model")

        # Generate chart data as JSON
        vendor_data = self._prepare_chart_data(by_vendor, "Vendor Distribution", "pie")
        floor_data = self._prepare_chart_data(by_floor, "APs by Floor", "bar")
        color_data = self._prepare_chart_data(by_color, "APs by Color", "bar")
        model_data = self._prepare_chart_data(by_model, "APs by Model", "bar")

        return f"""
        <section class="charts-section">
            <h3>Distribution Analysis</h3>
            <div class="charts-grid">
                <div class="chart-container">
                    <canvas id="vendorChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="floorChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="colorChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="modelChart"></canvas>
                </div>
            </div>
        </section>

        <script>
            window.chartData = {{
                vendor: {vendor_data},
                floor: {floor_data},
                color: {color_data},
                model: {model_data}
            }};
        </script>"""

    def _prepare_chart_data(
        self, grouped_data: dict, title: str, chart_type: str
    ) -> str:
        """Prepare chart data as JSON string.

        Args:
            grouped_data: Dictionary of {label: count}
            title: Chart title
            chart_type: Type of chart (pie, bar, etc.)

        Returns:
            JSON string with chart configuration
        """
        import json

        # Sort by count descending
        sorted_items = sorted(grouped_data.items(), key=lambda x: x[1], reverse=True)

        labels = [str(label) for label, _ in sorted_items]
        data = [count for _, count in sorted_items]

        # Generate colors
        colors = self._generate_colors(len(labels))

        config = {
            "type": chart_type,
            "title": title,
            "labels": labels,
            "data": data,
            "colors": colors,
        }

        return json.dumps(config)

    def _generate_colors(self, count: int) -> list[str]:
        """Generate color palette for charts.

        Args:
            count: Number of colors needed

        Returns:
            List of color strings in hex format
        """
        # Professional color palette
        base_colors = [
            "#4A90E2",  # Blue
            "#50C878",  # Emerald
            "#F5A623",  # Orange
            "#E94B3C",  # Red
            "#9013FE",  # Purple
            "#50E3C2",  # Teal
            "#F8E71C",  # Yellow
            "#BD10E0",  # Magenta
            "#7ED321",  # Lime
            "#4A4A4A",  # Gray
        ]

        # Repeat colors if needed
        colors = []
        for i in range(count):
            colors.append(base_colors[i % len(base_colors)])

        return colors

    def _get_css_styles(self) -> str:
        """Get embedded CSS styles."""
        return """
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            padding: 40px;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 3px solid #667eea;
        }

        h1 {
            color: #667eea;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        h2 {
            color: #666;
            font-size: 1.5rem;
            font-weight: 400;
        }

        h3 {
            color: #333;
            font-size: 1.8rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e0e0e0;
        }

        section {
            margin-bottom: 50px;
        }

        .summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 30px;
            color: white;
        }

        .summary h3 {
            color: white;
            border-bottom: 2px solid rgba(255,255,255,0.3);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .stat-card {
            background: rgba(255,255,255,0.15);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        thead {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        th {
            padding: 15px;
            text-align: left;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        td {
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
        }

        tr:hover {
            background: #f8f9fa;
        }

        td.count {
            font-weight: bold;
            color: #667eea;
            text-align: center;
        }

        td.number {
            text-align: right;
            font-family: 'Courier New', monospace;
            font-size: 0.95em;
        }

        td.centered {
            text-align: center;
            font-size: 1.2em;
        }

        .charts-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 30px;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-top: 20px;
        }

        .chart-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            height: 350px;
        }

        canvas {
            max-height: 100%;
        }

        footer {
            text-align: center;
            padding-top: 30px;
            margin-top: 50px;
            border-top: 2px solid #e0e0e0;
            color: #666;
        }

        footer a {
            color: #667eea;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }

            h1 {
                font-size: 1.8rem;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .chart-container {
                height: 300px;
            }

            .analytics-grid {
                grid-template-columns: 1fr;
            }

            .metrics-table {
                font-size: 0.9rem;
            }
        }

        /* Analytics Section Styles */
        .analytics-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 40px;
        }

        .analytics-section h3 {
            color: #667eea;
        }

        .analytics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 25px;
        }

        .analytics-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .analytics-card h4 {
            color: #333;
            font-size: 1.2rem;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #667eea;
        }

        .metrics-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.95rem;
        }

        .metrics-table th,
        .metrics-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .metrics-table th {
            background: #f5f5f5;
            font-weight: 600;
            color: #555;
        }

        .metrics-table tr:last-child td {
            border-bottom: none;
        }

        .metrics-table tr:hover {
            background: #f9f9f9;
        }
    </style>"""

    def _get_javascript(self) -> str:
        """Get embedded JavaScript for charts."""
        return """
    <script>
        // Initialize charts when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            const chartData = window.chartData;

            // Common chart options
            const commonOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            font: {
                                size: 12
                            }
                        }
                    }
                }
            };

            // Vendor chart (pie)
            if (chartData.vendor) {
                const ctx = document.getElementById('vendorChart');
                new Chart(ctx, {
                    type: chartData.vendor.type,
                    data: {
                        labels: chartData.vendor.labels,
                        datasets: [{
                            data: chartData.vendor.data,
                            backgroundColor: chartData.vendor.colors,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        ...commonOptions,
                        plugins: {
                            ...commonOptions.plugins,
                            title: {
                                display: true,
                                text: chartData.vendor.title,
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 20
                            }
                        }
                    }
                });
            }

            // Floor chart (bar)
            if (chartData.floor) {
                const ctx = document.getElementById('floorChart');
                new Chart(ctx, {
                    type: chartData.floor.type,
                    data: {
                        labels: chartData.floor.labels,
                        datasets: [{
                            label: 'Access Points',
                            data: chartData.floor.data,
                            backgroundColor: chartData.floor.colors,
                            borderWidth: 0
                        }]
                    },
                    options: {
                        ...commonOptions,
                        plugins: {
                            ...commonOptions.plugins,
                            title: {
                                display: true,
                                text: chartData.floor.title,
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 20
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            }

            // Color chart (bar)
            if (chartData.color) {
                const ctx = document.getElementById('colorChart');
                new Chart(ctx, {
                    type: chartData.color.type,
                    data: {
                        labels: chartData.color.labels,
                        datasets: [{
                            label: 'Access Points',
                            data: chartData.color.data,
                            backgroundColor: chartData.color.colors,
                            borderWidth: 0
                        }]
                    },
                    options: {
                        ...commonOptions,
                        plugins: {
                            ...commonOptions.plugins,
                            title: {
                                display: true,
                                text: chartData.color.title,
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 20
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            }

            // Model chart (bar)
            if (chartData.model) {
                const ctx = document.getElementById('modelChart');
                new Chart(ctx, {
                    type: chartData.model.type,
                    data: {
                        labels: chartData.model.labels,
                        datasets: [{
                            label: 'Access Points',
                            data: chartData.model.data,
                            backgroundColor: chartData.model.colors,
                            borderWidth: 0
                        }]
                    },
                    options: {
                        ...commonOptions,
                        plugins: {
                            ...commonOptions.plugins,
                            title: {
                                display: true,
                                text: chartData.model.title,
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 20
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            }
        });
    </script>"""

    def _generate_analytics_section(
        self, access_points: list[AccessPoint], radios: list
    ) -> str:
        """Generate analytics section with mounting and radio metrics.

        Args:
            access_points: List of access points
            radios: List of radios

        Returns:
            HTML string for analytics section
        """
        # Check if there's any analytics data
        has_height_data = any(ap.mounting_height is not None for ap in access_points)
        has_radio_data = len(radios) > 0

        if not has_height_data and not has_radio_data:
            return ""  # No analytics data available

        html_sections = []

        # Calculate mounting metrics
        mounting_metrics = None
        height_distribution = None
        installation_summary = None
        if has_height_data:
            mounting_metrics = MountingAnalytics.calculate_mounting_metrics(
                access_points
            )
            height_distribution = MountingAnalytics.group_by_height_range(access_points)
            installation_summary = MountingAnalytics.get_installation_summary(
                access_points
            )

        # Calculate radio metrics
        radio_metrics = None
        if has_radio_data:
            radio_metrics = RadioAnalytics.calculate_radio_metrics(radios)

        # Generate mounting analytics section if data available
        if has_height_data:
            # Prepare height distribution data for Chart.js
            height_labels = []
            height_counts = []
            for range_name in [
                "< 2.5m",
                "2.5-3.5m",
                "3.5-4.5m",
                "4.5-6.0m",
                "> 6.0m",
                "Unknown",
            ]:
                count = height_distribution.get(range_name, 0)
                if count > 0:
                    height_labels.append(range_name)
                    height_counts.append(count)

            height_labels_json = str(height_labels).replace("'", '"')
            height_counts_json = str(height_counts)

            mounting_html = f"""
        <section class="analytics-section">
            <h3>Installation & Mounting Analytics</h3>
            <div class="analytics-grid">
                <div class="analytics-card">
                    <h4>Mounting Metrics</h4>
                    <table class="metrics-table">
                        <thead>
                            <tr>
                                <th>Metric</th>
                                <th>Value</th>
                                <th>Unit</th>
                            </tr>
                        </thead>
                        <tbody>"""

            if mounting_metrics.avg_height is not None:
                mounting_html += f"""
                            <tr>
                                <td>Average Mounting Height</td>
                                <td>{mounting_metrics.avg_height:.2f}</td>
                                <td>meters</td>
                            </tr>
                            <tr>
                                <td>Minimum Height</td>
                                <td>{mounting_metrics.min_height:.2f}</td>
                                <td>meters</td>
                            </tr>
                            <tr>
                                <td>Maximum Height</td>
                                <td>{mounting_metrics.max_height:.2f}</td>
                                <td>meters</td>
                            </tr>
                            <tr>
                                <td>Height Variance</td>
                                <td>{mounting_metrics.height_variance:.4f}</td>
                                <td>m²</td>
                            </tr>"""

            mounting_html += f"""
                            <tr>
                                <td>APs with Height Data</td>
                                <td>{mounting_metrics.aps_with_height}</td>
                                <td>count</td>
                            </tr>"""

            if mounting_metrics.avg_azimuth is not None:
                mounting_html += f"""
                            <tr>
                                <td>Average Azimuth</td>
                                <td>{mounting_metrics.avg_azimuth:.1f}</td>
                                <td>degrees</td>
                            </tr>"""

            if mounting_metrics.avg_tilt is not None:
                mounting_html += f"""
                            <tr>
                                <td>Average Tilt</td>
                                <td>{mounting_metrics.avg_tilt:.1f}</td>
                                <td>degrees</td>
                            </tr>"""

            mounting_html += """
                        </tbody>
                    </table>
                </div>

                <div class="analytics-card">
                    <h4>Height Distribution</h4>
                    <canvas id="heightDistributionChart"></canvas>
                </div>

                <div class="analytics-card">
                    <h4>Installation Summary</h4>
                    <table class="metrics-table">
                        <thead>
                            <tr>
                                <th>Metric</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Total APs</td>
                                <td>{installation_summary['total_aps']}</td>
                            </tr>
                            <tr>
                                <td>APs with Tilt Data</td>
                                <td>{installation_summary['aps_with_tilt']}</td>
                            </tr>
                            <tr>
                                <td>APs with Azimuth Data</td>
                                <td>{installation_summary['aps_with_azimuth']}</td>
                            </tr>"""

            # Highlight if there are APs requiring adjustment
            adjustment_style = (
                'style="color: #d32f2f; font-weight: bold;"'
                if installation_summary["aps_requiring_height_adjustment"] > 0
                else ""
            )

            mounting_html += f"""
                            <tr>
                                <td>APs Requiring Height Adjustment</td>
                                <td {adjustment_style}>{installation_summary['aps_requiring_height_adjustment']}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <script>
            // Height Distribution Chart
            if (document.getElementById('heightDistributionChart')) {{
                const ctxHeight = document.getElementById('heightDistributionChart').getContext('2d');
                new Chart(ctxHeight, {{
                    type: 'bar',
                    data: {{
                        labels: {height_labels_json},
                        datasets: [{{
                            label: 'Number of APs',
                            data: {height_counts_json},
                            backgroundColor: 'rgba(54, 96, 146, 0.7)',
                            borderColor: 'rgba(54, 96, 146, 1)',
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {{
                            legend: {{
                                display: false
                            }},
                            title: {{
                                display: false
                            }}
                        }},
                        scales: {{
                            y: {{
                                beginAtZero: true,
                                ticks: {{
                                    stepSize: 1
                                }}
                            }}
                        }}
                    }}
                }});
            }}
        </script>
"""
            html_sections.append(mounting_html)

        # Generate radio analytics section if data available
        if has_radio_data:
            import json

            # Prepare frequency band data
            band_labels = []
            band_counts = []
            for band, count in sorted(radio_metrics.band_distribution.items()):
                band_labels.append(band if band else "Unknown")
                band_counts.append(count)

            band_labels_json = json.dumps(band_labels)
            band_counts_json = json.dumps(band_counts)

            # Prepare Wi-Fi standards data
            standard_labels = []
            standard_counts = []
            for standard, count in sorted(radio_metrics.standard_distribution.items()):
                standard_labels.append(standard if standard else "Unknown")
                standard_counts.append(count)

            standard_labels_json = json.dumps(standard_labels)
            standard_counts_json = json.dumps(standard_counts)

            # Prepare channel width data
            width_labels = []
            width_counts = []
            for width, count in sorted(
                radio_metrics.channel_width_distribution.items()
            ):
                width_labels.append(f"{width} MHz" if width else "Unknown")
                width_counts.append(count)

            width_labels_json = json.dumps(width_labels)
            width_counts_json = json.dumps(width_counts)

            # Prepare TX power distribution
            tx_power_dist = RadioAnalytics.get_tx_power_distribution(radios)
            tx_power_labels = []
            tx_power_counts = []
            for range_name in [
                "< 10 dBm",
                "10-15 dBm",
                "15-20 dBm",
                "20-25 dBm",
                "> 25 dBm",
            ]:
                count = tx_power_dist.get(range_name, 0)
                if count > 0:
                    tx_power_labels.append(range_name)
                    tx_power_counts.append(count)

            tx_power_labels_json = json.dumps(tx_power_labels)
            tx_power_counts_json = json.dumps(tx_power_counts)

            radio_html = f"""
        <section class="analytics-section">
            <h3>Radio & Wi-Fi Configuration Analytics</h3>
            <div class="analytics-grid">
                <div class="analytics-card">
                    <h4>Radio Configuration Summary</h4>
                    <table class="metrics-table">
                        <thead>
                            <tr>
                                <th>Metric</th>
                                <th>Value</th>
                                <th>Unit</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Total Radios</td>
                                <td>{radio_metrics.total_radios}</td>
                                <td>count</td>
                            </tr>"""

            if radio_metrics.avg_tx_power is not None:
                radio_html += f"""
                            <tr>
                                <td>Average TX Power</td>
                                <td>{radio_metrics.avg_tx_power:.2f}</td>
                                <td>dBm</td>
                            </tr>
                            <tr>
                                <td>Minimum TX Power</td>
                                <td>{radio_metrics.min_tx_power:.2f}</td>
                                <td>dBm</td>
                            </tr>
                            <tr>
                                <td>Maximum TX Power</td>
                                <td>{radio_metrics.max_tx_power:.2f}</td>
                                <td>dBm</td>
                            </tr>"""

            radio_html += """
                        </tbody>
                    </table>
                </div>

                <div class="analytics-card">
                    <h4>Frequency Band Distribution</h4>
                    <canvas id="bandDistributionChart"></canvas>
                </div>

                <div class="analytics-card">
                    <h4>Wi-Fi Standards</h4>
                    <canvas id="standardDistributionChart"></canvas>
                </div>

                <div class="analytics-card">
                    <h4>Channel Width Distribution</h4>
                    <table class="metrics-table">
                        <thead>
                            <tr>
                                <th>Channel Width</th>
                                <th>Count</th>
                                <th>Percentage</th>
                            </tr>
                        </thead>
                        <tbody>"""

            for width, count in sorted(
                radio_metrics.channel_width_distribution.items()
            ):
                percentage = (
                    (count / radio_metrics.total_radios * 100)
                    if radio_metrics.total_radios > 0
                    else 0
                )
                width_str = f"{width} MHz" if width else "Unknown"
                radio_html += f"""
                            <tr>
                                <td>{width_str}</td>
                                <td>{count}</td>
                                <td>{percentage:.1f}%</td>
                            </tr>"""

            radio_html += """
                        </tbody>
                    </table>
                </div>

                <div class="analytics-card">
                    <h4>TX Power Distribution</h4>
                    <canvas id="txPowerDistributionChart"></canvas>
                </div>
            </div>
        </section>

        <script>
            // Frequency Band Distribution Chart
            if (document.getElementById('bandDistributionChart')) {{
                const ctxBand = document.getElementById('bandDistributionChart').getContext('2d');
                new Chart(ctxBand, {{
                    type: 'pie',
                    data: {{
                        labels: {band_labels_json},
                        datasets: [{{
                            data: {band_counts_json},
                            backgroundColor: [
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(153, 102, 255, 0.7)',
                                'rgba(201, 203, 207, 0.7)'
                            ],
                            borderColor: '#fff',
                            borderWidth: 2
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {{
                            legend: {{
                                position: 'bottom',
                                labels: {{
                                    padding: 10
                                }}
                            }}
                        }}
                    }}
                }});
            }}

            // Wi-Fi Standards Distribution Chart
            if (document.getElementById('standardDistributionChart')) {{
                const ctxStandard = document.getElementById('standardDistributionChart').getContext('2d');
                new Chart(ctxStandard, {{
                    type: 'bar',
                    data: {{
                        labels: {standard_labels_json},
                        datasets: [{{
                            label: 'Number of Radios',
                            data: {standard_counts_json},
                            backgroundColor: 'rgba(153, 102, 255, 0.7)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {{
                            legend: {{
                                display: false
                            }}
                        }},
                        scales: {{
                            y: {{
                                beginAtZero: true,
                                ticks: {{
                                    stepSize: 1
                                }}
                            }}
                        }}
                    }}
                }});
            }}

            // TX Power Distribution Chart
            if (document.getElementById('txPowerDistributionChart')) {{
                const ctxTxPower = document.getElementById('txPowerDistributionChart').getContext('2d');
                new Chart(ctxTxPower, {{
                    type: 'bar',
                    data: {{
                        labels: {tx_power_labels_json},
                        datasets: [{{
                            label: 'Number of Radios',
                            data: {tx_power_counts_json},
                            backgroundColor: 'rgba(255, 159, 64, 0.7)',
                            borderColor: 'rgba(255, 159, 64, 1)',
                            borderWidth: 1
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {{
                            legend: {{
                                display: false
                            }}
                        }},
                        scales: {{
                            y: {{
                                beginAtZero: true,
                                ticks: {{
                                    stepSize: 1
                                }}
                            }}
                        }}
                    }}
                }});
            }}
        </script>
"""
            html_sections.append(radio_html)

        return "".join(html_sections)
